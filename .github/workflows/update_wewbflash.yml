name: Update Firmware Files and Manifests

on:
  release:
    types: [published, edited]
  workflow_dispatch:

jobs:
  update-firmware:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

      - name: Download Last 3 Releases + 3 Pre-Releases
        id: fetch-all
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const releases = await github.rest.repos.listReleases({ owner, repo });
            const stable = [];
            const pre = [];

            for (const rel of releases.data) {
              if (rel.draft) continue;
              (rel.prerelease ? pre : stable).push(rel);
              if (stable.length >= 3 && pre.length >= 3) break;
            }

            const selected = [...stable.slice(0, 3), ...pre.slice(0, 3)];
            const firmwareList = [];

            for (const release of selected) {
              const tag = release.tag_name;
              const version = tag.replace(/^v/gi, '');
              const isPre = release.prerelease;
              const assets = release.assets.filter(a => a.name.endsWith('.bin'));

              for (const asset of assets) {
                const dl = await github.rest.repos.getReleaseAsset({
                  owner,
                  repo,
                  asset_id: asset.id,
                  headers: { Accept: 'application/octet-stream' }
                });
                fs.writeFileSync(asset.name, Buffer.from(dl.data));
                firmwareList.push({
                  version: version,
                  prerelease: isPre,
                  file: asset.name
                });
                console.log(`Downloaded: ${asset.name}`);
              }
            }

            fs.writeFileSync('firmware_meta.json', JSON.stringify(firmwareList, null, 2));

      - name: Clear and Prepare /docs/firmware
        run: |
          mkdir -p docs/firmware
          rm -f docs/firmware/*.bin
          rm -f docs/firmware/*.json
          cp *.bin docs/firmware/
          echo "Updated at $(date -u)" > docs/firmware/last_update.txt
          cp firmware_meta.json docs/firmware/firmware.json

      - name: Generate Manifest Files for ESP Web Tools
        run: |
          node generateRelease.js
        working-directory: ./docs

      - name: Commit and Push Changes
        run: |
          git add docs/firmware
          git commit -m "Update firmware and manifests" || git commit --allow-empty -m "No changes"
          git pull --rebase
          git push
